/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AircraftService } from "../aircraft.service";
import { AircraftCreateInput } from "./AircraftCreateInput";
import { Aircraft } from "./Aircraft";
import { AircraftFindManyArgs } from "./AircraftFindManyArgs";
import { AircraftWhereUniqueInput } from "./AircraftWhereUniqueInput";
import { AircraftUpdateInput } from "./AircraftUpdateInput";

export class AircraftControllerBase {
  constructor(protected readonly service: AircraftService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Aircraft })
  async createAircraft(
    @common.Body() data: AircraftCreateInput
  ): Promise<Aircraft> {
    return await this.service.createAircraft({
      data: data,
      select: {
        aircraftName: true,
        aircraftNumber: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Aircraft] })
  @ApiNestedQuery(AircraftFindManyArgs)
  async aircraftItems(@common.Req() request: Request): Promise<Aircraft[]> {
    const args = plainToClass(AircraftFindManyArgs, request.query);
    return this.service.aircraftItems({
      ...args,
      select: {
        aircraftName: true,
        aircraftNumber: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Aircraft })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async aircraft(
    @common.Param() params: AircraftWhereUniqueInput
  ): Promise<Aircraft | null> {
    const result = await this.service.aircraft({
      where: params,
      select: {
        aircraftName: true,
        aircraftNumber: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Aircraft })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAircraft(
    @common.Param() params: AircraftWhereUniqueInput,
    @common.Body() data: AircraftUpdateInput
  ): Promise<Aircraft | null> {
    try {
      return await this.service.updateAircraft({
        where: params,
        data: data,
        select: {
          aircraftName: true,
          aircraftNumber: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Aircraft })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAircraft(
    @common.Param() params: AircraftWhereUniqueInput
  ): Promise<Aircraft | null> {
    try {
      return await this.service.deleteAircraft({
        where: params,
        select: {
          aircraftName: true,
          aircraftNumber: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
