/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Aircraft } from "./Aircraft";
import { AircraftCountArgs } from "./AircraftCountArgs";
import { AircraftFindManyArgs } from "./AircraftFindManyArgs";
import { AircraftFindUniqueArgs } from "./AircraftFindUniqueArgs";
import { CreateAircraftArgs } from "./CreateAircraftArgs";
import { UpdateAircraftArgs } from "./UpdateAircraftArgs";
import { DeleteAircraftArgs } from "./DeleteAircraftArgs";
import { AircraftService } from "../aircraft.service";
@graphql.Resolver(() => Aircraft)
export class AircraftResolverBase {
  constructor(protected readonly service: AircraftService) {}

  async _aircraftItemsMeta(
    @graphql.Args() args: AircraftCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Aircraft])
  async aircraftItems(
    @graphql.Args() args: AircraftFindManyArgs
  ): Promise<Aircraft[]> {
    return this.service.aircraftItems(args);
  }

  @graphql.Query(() => Aircraft, { nullable: true })
  async aircraft(
    @graphql.Args() args: AircraftFindUniqueArgs
  ): Promise<Aircraft | null> {
    const result = await this.service.aircraft(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Aircraft)
  async createAircraft(
    @graphql.Args() args: CreateAircraftArgs
  ): Promise<Aircraft> {
    return await this.service.createAircraft({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Aircraft)
  async updateAircraft(
    @graphql.Args() args: UpdateAircraftArgs
  ): Promise<Aircraft | null> {
    try {
      return await this.service.updateAircraft({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Aircraft)
  async deleteAircraft(
    @graphql.Args() args: DeleteAircraftArgs
  ): Promise<Aircraft | null> {
    try {
      return await this.service.deleteAircraft(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
