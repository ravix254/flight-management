/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Flight as PrismaFlight,
  MaintenanceRecord as PrismaMaintenanceRecord,
} from "@prisma/client";

export class FlightServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FlightCountArgs, "select">): Promise<number> {
    return this.prisma.flight.count(args);
  }

  async flights(args: Prisma.FlightFindManyArgs): Promise<PrismaFlight[]> {
    return this.prisma.flight.findMany(args);
  }
  async flight(
    args: Prisma.FlightFindUniqueArgs
  ): Promise<PrismaFlight | null> {
    return this.prisma.flight.findUnique(args);
  }
  async createFlight(args: Prisma.FlightCreateArgs): Promise<PrismaFlight> {
    return this.prisma.flight.create(args);
  }
  async updateFlight(args: Prisma.FlightUpdateArgs): Promise<PrismaFlight> {
    return this.prisma.flight.update(args);
  }
  async deleteFlight(args: Prisma.FlightDeleteArgs): Promise<PrismaFlight> {
    return this.prisma.flight.delete(args);
  }

  async findMaintenanceRecords(
    parentId: string,
    args: Prisma.MaintenanceRecordFindManyArgs
  ): Promise<PrismaMaintenanceRecord[]> {
    return this.prisma.flight
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .maintenanceRecords(args);
  }
}
