/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MaintenanceRecordService } from "../maintenanceRecord.service";
import { MaintenanceRecordCreateInput } from "./MaintenanceRecordCreateInput";
import { MaintenanceRecord } from "./MaintenanceRecord";
import { MaintenanceRecordFindManyArgs } from "./MaintenanceRecordFindManyArgs";
import { MaintenanceRecordWhereUniqueInput } from "./MaintenanceRecordWhereUniqueInput";
import { MaintenanceRecordUpdateInput } from "./MaintenanceRecordUpdateInput";

export class MaintenanceRecordControllerBase {
  constructor(protected readonly service: MaintenanceRecordService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MaintenanceRecord })
  async createMaintenanceRecord(
    @common.Body() data: MaintenanceRecordCreateInput
  ): Promise<MaintenanceRecord> {
    return await this.service.createMaintenanceRecord({
      data: {
        ...data,

        flight: data.flight
          ? {
              connect: data.flight,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        flight: {
          select: {
            id: true,
          },
        },

        id: true,
        maintainer: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MaintenanceRecord] })
  @ApiNestedQuery(MaintenanceRecordFindManyArgs)
  async maintenanceRecords(
    @common.Req() request: Request
  ): Promise<MaintenanceRecord[]> {
    const args = plainToClass(MaintenanceRecordFindManyArgs, request.query);
    return this.service.maintenanceRecords({
      ...args,
      select: {
        createdAt: true,

        flight: {
          select: {
            id: true,
          },
        },

        id: true,
        maintainer: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MaintenanceRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async maintenanceRecord(
    @common.Param() params: MaintenanceRecordWhereUniqueInput
  ): Promise<MaintenanceRecord | null> {
    const result = await this.service.maintenanceRecord({
      where: params,
      select: {
        createdAt: true,

        flight: {
          select: {
            id: true,
          },
        },

        id: true,
        maintainer: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MaintenanceRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMaintenanceRecord(
    @common.Param() params: MaintenanceRecordWhereUniqueInput,
    @common.Body() data: MaintenanceRecordUpdateInput
  ): Promise<MaintenanceRecord | null> {
    try {
      return await this.service.updateMaintenanceRecord({
        where: params,
        data: {
          ...data,

          flight: data.flight
            ? {
                connect: data.flight,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          flight: {
            select: {
              id: true,
            },
          },

          id: true,
          maintainer: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MaintenanceRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMaintenanceRecord(
    @common.Param() params: MaintenanceRecordWhereUniqueInput
  ): Promise<MaintenanceRecord | null> {
    try {
      return await this.service.deleteMaintenanceRecord({
        where: params,
        select: {
          createdAt: true,

          flight: {
            select: {
              id: true,
            },
          },

          id: true,
          maintainer: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
