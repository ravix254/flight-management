/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PilotService } from "../pilot.service";
import { PilotCreateInput } from "./PilotCreateInput";
import { Pilot } from "./Pilot";
import { PilotFindManyArgs } from "./PilotFindManyArgs";
import { PilotWhereUniqueInput } from "./PilotWhereUniqueInput";
import { PilotUpdateInput } from "./PilotUpdateInput";

export class PilotControllerBase {
  constructor(protected readonly service: PilotService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Pilot })
  async createPilot(@common.Body() data: PilotCreateInput): Promise<Pilot> {
    return await this.service.createPilot({
      data: data,
      select: {
        createdAt: true,
        id: true,
        pilotBirthday: true,
        pilotName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Pilot] })
  @ApiNestedQuery(PilotFindManyArgs)
  async pilots(@common.Req() request: Request): Promise<Pilot[]> {
    const args = plainToClass(PilotFindManyArgs, request.query);
    return this.service.pilots({
      ...args,
      select: {
        createdAt: true,
        id: true,
        pilotBirthday: true,
        pilotName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Pilot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async pilot(
    @common.Param() params: PilotWhereUniqueInput
  ): Promise<Pilot | null> {
    const result = await this.service.pilot({
      where: params,
      select: {
        createdAt: true,
        id: true,
        pilotBirthday: true,
        pilotName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Pilot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePilot(
    @common.Param() params: PilotWhereUniqueInput,
    @common.Body() data: PilotUpdateInput
  ): Promise<Pilot | null> {
    try {
      return await this.service.updatePilot({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          pilotBirthday: true,
          pilotName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Pilot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePilot(
    @common.Param() params: PilotWhereUniqueInput
  ): Promise<Pilot | null> {
    try {
      return await this.service.deletePilot({
        where: params,
        select: {
          createdAt: true,
          id: true,
          pilotBirthday: true,
          pilotName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
