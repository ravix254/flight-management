/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Pilot } from "./Pilot";
import { PilotCountArgs } from "./PilotCountArgs";
import { PilotFindManyArgs } from "./PilotFindManyArgs";
import { PilotFindUniqueArgs } from "./PilotFindUniqueArgs";
import { CreatePilotArgs } from "./CreatePilotArgs";
import { UpdatePilotArgs } from "./UpdatePilotArgs";
import { DeletePilotArgs } from "./DeletePilotArgs";
import { PilotService } from "../pilot.service";
@graphql.Resolver(() => Pilot)
export class PilotResolverBase {
  constructor(protected readonly service: PilotService) {}

  async _pilotsMeta(
    @graphql.Args() args: PilotCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Pilot])
  async pilots(@graphql.Args() args: PilotFindManyArgs): Promise<Pilot[]> {
    return this.service.pilots(args);
  }

  @graphql.Query(() => Pilot, { nullable: true })
  async pilot(
    @graphql.Args() args: PilotFindUniqueArgs
  ): Promise<Pilot | null> {
    const result = await this.service.pilot(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Pilot)
  async createPilot(@graphql.Args() args: CreatePilotArgs): Promise<Pilot> {
    return await this.service.createPilot({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Pilot)
  async updatePilot(
    @graphql.Args() args: UpdatePilotArgs
  ): Promise<Pilot | null> {
    try {
      return await this.service.updatePilot({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Pilot)
  async deletePilot(
    @graphql.Args() args: DeletePilotArgs
  ): Promise<Pilot | null> {
    try {
      return await this.service.deletePilot(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
